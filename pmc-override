#!/usr/bin/env python3

from sys import argv
from os import environ
from argparse import ArgumentParser
from pprint import pprint
from urllib.request import urlopen, Request
from json import dumps, loads

def toggle(token, resource):
  headers = {
    'X-Auth-Token': token
  }
  data = {
    'action': 'start',
    'item_ids': [resource]
  }
  url = 'https://console.parkmycloud.com/resources/toggle'

  request = Request(url, dumps(data).encode('ascii'), headers)
  request.get_method = lambda: 'PUT'
  with urlopen(request) as response:
    response = loads(response.read())
    pprint(response)


def suspend(token, resource, duration):
  headers = {
    'X-Auth-Token': token
  }
  url = 'https://console.parkmycloud.com/v2/resource/override'
  data = {
    'item_ids': [ resource ],
    'override_period': duration
  }

  request = Request(url, dumps(data).encode('ascii'), headers)
  request.get_method = lambda: 'PUT'
  with urlopen(request) as response:
    response = loads(response.read())
    pprint(response)


def resource(token, resource):
  headers = {
    'X-Auth-Token': token
  }
  url = f'https://console.parkmycloud.com/resources/paged?name={resource}'
  
  request = Request(url, headers=headers)
  with urlopen(request) as response:
    response = loads(response.read())
    return response['data'][0]['id']


def auth(key, key_id):
  headers = {'content-type': 'application/json'}
  url = 'https://console.parkmycloud.com/v2/auth/login'
  data = {
    'key': key,
    'key_id': key_id,
    'duration': 900
  }

  request = Request(url, dumps(data).encode('ascii'), headers)
  with urlopen(request) as response:
   response = loads(response.read())
   return response['token']


def main():    
  parser = ArgumentParser()
  parser.add_argument('-r', '--resource', required=True, choices=['development', 'staging'], help="Name of the resource whose schedule to override")
  parser.add_argument('-d', '--duration', type=int, default=2, help="Duration in hours to override schedule.")
  args = parser.parse_args()

  auth_key = environ['PMC_AUTH_KEY']
  auth_key_id = environ['PMC_AUTH_KEY_ID']

  token = auth(auth_key, auth_key_id)

  resource_id = resource(token, args.resource)

  suspend(token, resource_id, args.duration)

  toggle(token, resource_id)
  

if __name__ == "__main__":
    # execute only if run as a script
    main()
